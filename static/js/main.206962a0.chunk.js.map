{"version":3,"sources":["constants.js","components/Label.js","components/Column.js","components/Toolbar.js","monthNames.js","App.js","serviceWorker.js","index.js"],"names":["MIN","AVERAGE","MEDIAN","types","Label","text","visible","style","position","top","zIndex","Column","monthData","type","monthName","useState","heights","setHeights","isHover","setIsHover","useEffect","temperatures","map","item","Number","value","halfOfLength","length","average","reduce","acc","sortedTemperatures","sort","a","b","median","Math","floor","min","max","className","height","abs","bottom","onMouseOver","onMouseLeave","toFixed","Toolbar","setType","handleClick","e","target","t","onClick","nominative","genitive","App","monthNames","month","data","filter","day","date","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.206962a0.chunk.js","sourcesContent":["export const MIN = 'min';\r\nexport const MAX = 'max';\r\nexport const AVERAGE = 'average';\r\nexport const MEDIAN = 'median';\r\nexport const HEIGHT_MULTIPLIER = 10;\r\nexport const types = [MIN, MAX, AVERAGE, MEDIAN];","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Label = ({ text, visible }) => {\r\n  if (!visible) return null;\r\n  \r\n  return (\r\n    <div style={{position: 'absolute', top: -45, zIndex: 2}}>\r\n      { text }\r\n    </div> \r\n  );\r\n};\r\n\r\nLabel.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  visible: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default Label;","import React, { useEffect, useState } from 'react';\r\nimport { MIN, MAX, AVERAGE, MEDIAN, HEIGHT_MULTIPLIER } from '../constants';\r\nimport Label from './Label';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Column = ({ monthData, type, monthName }) => {\r\n  const [ heights, setHeights ] = useState({});\r\n  const [ isHover, setIsHover] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    const temperatures = monthData.map(item => Number(item.value));\r\n    const halfOfLength = temperatures.length / 2;\r\n    const average = temperatures.reduce((acc, item) => acc + item, 0) / temperatures.length;\r\n    \r\n    const sortedTemperatures = [...temperatures].sort((a, b) => a - b);\r\n    const median = temperatures.length % 2 === 0 \r\n      ? (sortedTemperatures[halfOfLength] + sortedTemperatures[halfOfLength - 1]) / 2 \r\n      : sortedTemperatures[Math.floor(halfOfLength - 1)]\r\n\r\n    setHeights({\r\n      [MIN]: Math.min(...temperatures),\r\n      [MAX]: Math.max(...temperatures),\r\n      [AVERAGE]: average,\r\n      [MEDIAN]: median\r\n    })\r\n  }, [monthData]);\r\n\r\n  return (\r\n    <div \r\n      className='column'\r\n      style={{ \r\n        height: Math.abs(heights[type] * HEIGHT_MULTIPLIER) || 0, \r\n        bottom: heights[type] > 0 ? 'auto' : heights[type] * HEIGHT_MULTIPLIER || 0\r\n      }}      \r\n      onMouseOver={() => setIsHover(true)} \r\n      onMouseLeave={() => setIsHover(false)}>\r\n        <Label text={`${monthName} ${heights[type] && heights[type].toFixed(2)}°C`} visible={isHover}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nColumn.propTypes = {\r\n  monthData: PropTypes.arrayOf(PropTypes.shape({\r\n    date: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired\r\n  })),\r\n  type: PropTypes.string.isRequired,\r\n  monthName: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Column;","import React from 'react';\r\nimport { types } from '../constants';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Toolbar = ({type, setType}) => {\r\n  const handleClick = e => setType(e.target.value);\r\n  return (\r\n    <div className='toolbar'>\r\n      {\r\n        types.map(t => \r\n          <button className={t === type ? 'active-btn' : null} key={t} value={t} onClick={handleClick}>\r\n            { t }\r\n          </button>)\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nToolbar.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  setType: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Toolbar;","export default [\r\n  { nominative: 'январь', genitive: 'января'},\r\n  { nominative: 'февраль', genitive: 'февраля'},\r\n  { nominative: 'март', genitive: 'марта'},\r\n  { nominative: 'апрель', genitive: 'апреля'},\r\n  { nominative: 'май', genitive: 'мая'},\r\n  { nominative: 'июнь', genitive: 'июня'},\r\n  { nominative: 'июль', genitive: 'июля'},\r\n  { nominative: 'август', genitive: 'августа'},\r\n  { nominative: 'сентябрь', genitive: 'сентября'},\r\n  { nominative: 'октябрь', genitive: 'октября'},\r\n  { nominative: 'ноябрь', genitive: 'ноября'},\r\n  { nominative: 'декабрь', genitive: 'декабря'},\r\n];","import data from './data.json';\r\nimport React, { useState } from 'react';\r\nimport Column from './components/Column';\r\nimport Toolbar from './components/Toolbar';\r\nimport monthNames from './monthNames';\r\nimport { MIN } from './constants';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [ type, setType ] = useState(MIN);\r\n\r\n  return (\r\n    <>\r\n      <Toolbar type={type} setType={setType} />\r\n      <div className=\"chart\">\r\n        {\r\n          monthNames.map(month => {\r\n            const monthData = [ ...data.filter(day => day.date.includes(month.genitive)) ];\r\n            return <Column key={month.nominative} monthData={monthData} type={type} monthName={month.nominative}/>\r\n          })\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}