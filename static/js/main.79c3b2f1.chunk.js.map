{"version":3,"sources":["constants.js","components/Label.js","components/Column.js","components/Toolbar.js","monthNames.js","App.js","serviceWorker.js","index.js"],"names":["types","Label","text","visible","style","position","top","zIndex","Column","monthData","type","monthName","useState","heights","setHeights","isHover","setIsHover","useEffect","temperatures","map","item","Number","value","halfOfLength","length","average","reduce","acc","median","Math","floor","min","max","className","height","abs","bottom","onMouseOver","onMouseLeave","toFixed","Toolbar","setType","handleClick","e","target","t","key","onClick","nominative","genitive","App","monthNames","month","data","filter","day","date","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79c3b2f1.chunk.js","sourcesContent":["export const MIN = 'min';\r\nexport const MAX = 'max';\r\nexport const AVERAGE = 'average';\r\nexport const MEDIAN = 'median';\r\nexport const HEIGHT_MULTIPLIER = 10;\r\nexport const types = [MIN, MAX, AVERAGE, MEDIAN];","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Label = ({ text, visible }) => {\r\n  if (!visible) return null;\r\n  \r\n  return (\r\n    <div style={{position: 'absolute', top: -45, zIndex: 2}}>\r\n      { text }\r\n    </div> \r\n  );\r\n};\r\n\r\nLabel.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  visible: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default Label;","import React, { useEffect, useState } from 'react';\r\nimport { MIN, MAX, AVERAGE, MEDIAN, HEIGHT_MULTIPLIER } from '../constants';\r\nimport Label from './Label';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Column = ({ monthData, type, monthName }) => {\r\n  const [ heights, setHeights ] = useState({});\r\n  const [ isHover, setIsHover] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    const temperatures = monthData.map(item => Number(item.value));\r\n    const halfOfLength = temperatures.length / 2;\r\n    const average = temperatures.reduce((acc, item) => acc + item, 0) / temperatures.length;\r\n    const median = temperatures.length % 2 === 0 \r\n      ? (temperatures[halfOfLength] + temperatures[halfOfLength - 1]) / 2 \r\n      : temperatures[Math.floor(halfOfLength - 1)]\r\n\r\n    setHeights({\r\n      [MIN]: Math.min(...temperatures),\r\n      [MAX]: Math.max(...temperatures),\r\n      [AVERAGE]: average,\r\n      [MEDIAN]: median\r\n    })\r\n  }, [monthData]);\r\n\r\n  return (\r\n    <div \r\n      className='column'\r\n      style={{ \r\n        height: Math.abs(heights[type] * HEIGHT_MULTIPLIER) || 0, \r\n        bottom: heights[type] > 0 ? 'auto' : heights[type] * HEIGHT_MULTIPLIER || 0\r\n      }}      \r\n      onMouseOver={() => setIsHover(true)} \r\n      onMouseLeave={() => setIsHover(false)}>\r\n        <Label text={`${monthName} ${heights[type] && heights[type].toFixed(2)}°C`} visible={isHover}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nColumn.propTypes = {\r\n  monthData: PropTypes.arrayOf(PropTypes.shape({\r\n    date: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired\r\n  })),\r\n  type: PropTypes.string.isRequired,\r\n  monthName: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Column;","import React from 'react';\r\nimport { types } from '../constants';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Toolbar = ({type, setType}) => {\r\n  const handleClick = e => setType(e.target.value);\r\n  return (\r\n    <div className='toolbar'>\r\n      {\r\n        types.map(t => \r\n          <button className={t === type ? 'active-btn' : null} key={t} value={t} onClick={handleClick}>\r\n            { t }\r\n          </button>)\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nToolbar.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  setType: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Toolbar;","export default [\r\n  { nominative: 'январь', genitive: 'января'},\r\n  { nominative: 'февраль', genitive: 'февраля'},\r\n  { nominative: 'март', genitive: 'марта'},\r\n  { nominative: 'апрель', genitive: 'апреля'},\r\n  { nominative: 'май', genitive: 'мая'},\r\n  { nominative: 'июнь', genitive: 'июня'},\r\n  { nominative: 'июль', genitive: 'июля'},\r\n  { nominative: 'август', genitive: 'августа'},\r\n  { nominative: 'сентябрь', genitive: 'сентября'},\r\n  { nominative: 'октябрь', genitive: 'октября'},\r\n  { nominative: 'ноябрь', genitive: 'ноября'},\r\n  { nominative: 'декабрь', genitive: 'декабря'},\r\n];","import data from './data.json';\nimport React, { useState } from 'react';\nimport Column from './components/Column';\nimport Toolbar from './components/Toolbar';\nimport monthNames from './monthNames';\nimport { MIN } from './constants';\nimport './App.css';\n\nfunction App() {\n  const [ type, setType ] = useState(MIN);\n\n  return (\n    <>\n      <Toolbar type={type} setType={setType} />\n      <div className=\"chart\">\n        {\n          monthNames.map(month => {\n            const monthData = [ ...data.filter(day => day.date.includes(month.genitive)) ];\n            return <Column key={month.nominative} monthData={monthData} type={type} monthName={month.nominative}/>\n          })\n        }\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}